name: Deploy Project
on: 
  # List of events 
  push:
    branches:
      - main
      - "dev-*"
      - "feat/**" 
    paths:
      - ".github/workflows/*"
  pull_request:
    types:
      # List of event activities
      - opened
      - edited
      - closed
  workflow_dispatch:


jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3

      # Cache is available to all the jobs by default, but each job can also have their own cache
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm  #keeps the cache in this location in github's cloud instance
          # when required fetches the cache using this key
          # as it's name is expected to be variable everytime, so a variable name is given in such a way that
          # it will see if any change happens tot he package-lock.json file, then it will generate a new hash 
          # the new hash will be added to the name of the key of the hash to make it unique
          key: deps-node-modules-${{ hashfiles('**/package-lock.json') }}  
          
      - name: Install dependencies
        run: npm ci 

      - name: Run tests
        run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
    # Get the output from the id "publish" and file "script-file"
    # This can be used in other jobs
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci 

      - name: Build website
        run: npm run build

      # Publish JS filenames so that other jobs can use them
      - name: Publish JS filename
        id: publish 
        run: find dist/assets/ -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          # The list of files and folder to be stored as artifact
          path: |
            dist 
            package.json

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files

      - name: Check for artifact
        run: ls

      - name: Output filename
        #  Fetch the value of "script-file" parameter of type "outputs" from "build" job
        run: echo "${{ needs.build.outputs.script-file }}"

      - name: Deploy 
        run: echo "Deployed..."